theme(legend.position = "none")
dis_fig
m <- dist1b_func(am_list[[1]],"matrix",0.3) #see aux_functions.R for this script
#30% reduction in contacts
for(i in 1:nreps)
{
m <- dist1b_func(am_list[[1]],"matrix",0.3) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out1 <- res1
out2 <- res2
out3 <- res3
} else
{
out1 <- bind_rows(out1,res1)
out2 <- bind_rows(out2,res2)
out3 <- bind_rows(out3,res3)
}
}
#60% reduction in contacts
for(i in 1:nreps){
m <- dist1b_func(am_list[[1]],"matrix",0.6) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out4 <- res1
out5 <- res2
out6 <- res3
} else
{
out4 <- bind_rows(out4,res1)
out5 <- bind_rows(out5,res2)
out6 <- bind_rows(out6,res3)
}
}
#90% reduction in contacts
for(i in 1:nreps){
m <- dist1b_func(am_list[[1]],"matrix",0.9) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out7 <- res1
out8 <- res2
out9 <- res3
} else
{
out7 <- bind_rows(out7,res1)
out8 <- bind_rows(out8,res2)
out9 <- bind_rows(out9,res3)
}
}
res <- bind_rows(out1,out2,out3,out4,out5,out6,out7,out8,out9,out10,out11,out12) %>%
mutate(distancing = rep(c("30% reduction","60% reduction","90% reduction","0% reduction"),
each = nrow(out1)*3),
intervention = rep(rep(c("Nothing", "Primary tracing","Secondary tracing"),
each = nrow(out1)),4))
saveRDS(res,"data-raw/distancing.rds")
dis <- read_rds("data-raw/distancing.rds")
dis_fig <- dis  %>%
mutate(intervention = recode(intervention, Nothing = "No control")) %>%
case_plot(facet = "grid", gridvar = "distancing")+
theme(legend.position = "none")
dis_fig
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
library(covidhm)
library(dplyr)
library(purrr)
library(igraph)
nreps <- 50
load("data-raw/am_list.RData")
load("data-raw/amcontacts.RData")
## Set up multicore if using see ?future::plan for details
## Use the workers argument to control the number of cores used.
future::plan("multiprocess")
scenario_sim2 <- partial(scenario_sim, num.initial.cases = 1, prop.asym=0.4,
prop.ascertain = 0.9, cap_max_days = 69,
delay_shape = 1, delay_scale = 1.4,R = 0.8,presymrate = 0.2,
outside = 0.001, sensitivity = "high", testing = "none")
#30% reduction in contacts
for(i in 1:nreps)
{
m <- dist2b_func(am_list[[1]],am.contacts,"matrix",0.3) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out1 <- res1
out2 <- res2
out3 <- res3
} else
{
out1 <- bind_rows(out1,res1)
out2 <- bind_rows(out2,res2)
out3 <- bind_rows(out3,res3)
}
}
#60% reduction in contacts
for(i in 1:nreps){
m <- dist2b_func(am_list[[1]],am.contacts,"matrix",0.6) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out4 <- res1
out5 <- res2
out6 <- res3
} else
{
out4 <- bind_rows(out4,res1)
out5 <- bind_rows(out5,res2)
out6 <- bind_rows(out6,res3)
}
}
#90% reduction in contacts
for(i in 1:nreps){
m <- dist2b_func(am_list[[1]],am.contacts,"matrix",0.9) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out7 <- res1
out8 <- res2
out9 <- res3
} else
{
out7 <- bind_rows(out7,res1)
out8 <- bind_rows(out8,res2)
out9 <- bind_rows(out9,res3)
}
}
out10 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "nothing")
out11 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "primary_quarantine")
out12 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "secondary_quarantine")
res <- bind_rows(out1,out2,out3,out4,out5,out6,out7,out8,out9,out10,out11,out12) %>%
mutate(distancing = rep(c("30% reduction","60% reduction","90% reduction","0% reduction"),
each = nrow(out1)*3),
intervention = rep(rep(c("Nothing", "Primary tracing","Secondary tracing"),
each = nrow(out1)),4))
saveRDS(res,"data-raw/distancing2.rds")
dis2 <- read_rds("data-raw/distancing2.rds")
dis2_fig <- dis2  %>%
case_plot(facet = "grid", gridvar = "distancing")
pdf("inst/plots/Figure_S10.pdf",
width =12,
height = 8)
dis2_fig
dev.off()
dis <- read_rds("data-raw/distancing.rds")
tes <- read_rds("data-raw/testing.rds")
tes_fig <- tes %>%
bind_rows(sce %>%
filter(intervention %in% c("Primary tracing",
"Secondary tracing")) %>%
mutate(testing = "No testing")) %>%
mutate(testing = factor(testing, levels = c("No testing",
"5 tests per day",
"25 tests per day",
"50 tests per day"))) %>%
case_plot(facet = "grid",gridvar = "testing",testing = TRUE)+
theme(legend.position = "top")
dis_fig <- dis  %>%
mutate(intervention = recode(intervention, Nothing = "No control")) %>%
case_plot(facet = "grid", gridvar = "distancing")+
theme(legend.position = "none")
fig3 <- plot_grid(tes_fig,dis_fig,nrow = 2,labels = "AUTO",rel_heights = c(0.45,0.55))
pdf("inst/plots/Figure_3.pdf",
width = 12,
height = 16)
fig3
dev.off()
sce <- read_rds("data-raw/scenarios.rds")
net <- read_rds("data-raw/network.rds")
sen <- read_rds("data-raw/sensitivity.rds")
dis <- read_rds("data-raw/distancing.rds")
dis2 <- read_rds("data-raw/distancing2.rds")
out <- read_rds("data-raw/outside.rds")
tes <- read_rds("data-raw/testing.rds")
#Scenarios
sce %>% filter(week == 9) %>%
group_by(intervention) %>%
summarise(medcases = median(cumcases)/468,
Ucases = quantile(cumcases,0.75)/468,
Lcases = quantile(cumcases, 0.25)/468)
sce %>% filter(week == 3) %>%
group_by(intervention) %>%
summarise(medcases = median(weekly_quarantine)/468,
Ucases = quantile(weekly_quarantine, 0.75)/468,
Lcases = quantile(weekly_quarantine, 0.25)/468)
sce %>% filter(week == 9) %>%
group_by(intervention) %>%
summarise(medcases = median(weekly_quarantine)/468,
Ucases = quantile(weekly_quarantine, 0.75)/468,
Lcases = quantile(weekly_quarantine, 0.25)/468)
#testing
tes %>% filter(week == 9) %>%
group_by(intervention,testing) %>%
summarise(medcases = median(cumcases)/468,
Ucases = quantile(cumcases,0.75)/468,
Lcases = quantile(cumcases, 0.25)/468)
tes %>% filter(week == 3) %>%
group_by(intervention,testing) %>%
summarise(medcases = median(weekly_tests)/468,
Ucases = quantile(weekly_tests,0.75)/468,
Lcases = quantile(weekly_tests, 0.25)/468)
#distancing
dis %>% filter(week == 9) %>%
group_by(intervention,distancing) %>%
summarise(medcases = median(cumcases)/468,
Ucases = quantile(cumcases,0.75)/468,
Lcases = quantile(cumcases, 0.25)/468)
dis %>% filter(week == 3) %>%
group_by(intervention,distancing) %>%
summarise(medcases = median(weekly_quarantine)/468,
Ucases = quantile(weekly_quarantine,0.75)/468,
Lcases = quantile(weekly_quarantine, 0.25)/468)
###########################################
#SIMULATE EPIDIMIC WITH SOCIAL DISTANCING - supplementary method
###########################################
library(covidhm)
library(dplyr)
library(purrr)
library(igraph)
# Set number of replicates ------------------------------------------------
nreps <- 50
# Load Haselmere network --------------------------------------------------
load("data-raw/am_list.RData")
load("data-raw/amcontacts.RData")
## Set up multicore if using see ?future::plan for details
## Use the workers argument to control the number of cores used.
future::plan("multiprocess")
# Set up partial function -------------------------------------------------
scenario_sim2 <- partial(scenario_sim, num.initial.cases = 1, prop.asym=0.4,
prop.ascertain = 0.9, cap_max_days = 69,
delay_shape = 1, delay_scale = 1.4,R = 0.8,presymrate = 0.2,
outside = 0.001, sensitivity = "high", testing = "none")
#30% reduction in contacts
for(i in 1:nreps)
{
m <- dist1_func(am_list[[1]],am.contacts,"matrix",0.3) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out1 <- res1
out2 <- res2
out3 <- res3
} else
{
out1 <- bind_rows(out1,res1)
out2 <- bind_rows(out2,res2)
out3 <- bind_rows(out3,res3)
}
}
#60% reduction in contacts
for(i in 1:nreps){
m <- dist1_func(am_list[[1]],am.contacts,"matrix",0.6) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out4 <- res1
out5 <- res2
out6 <- res3
} else
{
out4 <- bind_rows(out4,res1)
out5 <- bind_rows(out5,res2)
out6 <- bind_rows(out6,res3)
}
}
#90% reduction in contacts
for(i in 1:nreps){
m <- dist1_func(am_list[[1]],am.contacts,"matrix",0.9) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out7 <- res1
out8 <- res2
out9 <- res3
} else
{
out7 <- bind_rows(out7,res1)
out8 <- bind_rows(out8,res2)
out9 <- bind_rows(out9,res3)
}
}
# No distancing -----------------------------------------------------------
out10 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "nothing")
out11 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "primary_quarantine")
out12 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "secondary_quarantine")
# bind and write output ---------------------------------------------------
res <- bind_rows(out1,out2,out3,out4,out5,out6,out7,out8,out9,out10,out11,out12) %>%
mutate(distancing = rep(c("30% reduction","60% reduction","90% reduction","0% reduction"),
each = nrow(out1)*3),
intervention = rep(rep(c("Nothing", "Primary tracing","Secondary tracing"),
each = nrow(out1)),4))
saveRDS(res,"data-raw/distancing2.rds")
library(covidhm)
library(dplyr)
library(purrr)
library(igraph)
nreps <- 50
load("data-raw/am_list.RData")
load("data-raw/amcontacts.RData")
## Set up multicore if using see ?future::plan for details
## Use the workers argument to control the number of cores used.
future::plan("multiprocess")
scenario_sim2 <- partial(scenario_sim, num.initial.cases = 1, prop.asym=0.4,
prop.ascertain = 0.9, cap_max_days = 69,
delay_shape = 1, delay_scale = 1.4,R = 0.8,presymrate = 0.2,
outside = 0.001, sensitivity = "high", testing = "none")
#30% reduction in contacts
for(i in 1:nreps)
{
m <- dist1_func(am_list[[1]],am.contacts,"matrix",0.2) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out1 <- res1
out2 <- res2
out3 <- res3
} else
{
out1 <- bind_rows(out1,res1)
out2 <- bind_rows(out2,res2)
out3 <- bind_rows(out3,res3)
}
}
m <- dist1_func(am_list[[1]],"matrix",0.2) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
#30% reduction in contacts
for(i in 1:nreps)
{
m <- dist1_func(am_list[[1]],"matrix",0.2) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out1 <- res1
out2 <- res2
out3 <- res3
} else
{
out1 <- bind_rows(out1,res1)
out2 <- bind_rows(out2,res2)
out3 <- bind_rows(out3,res3)
}
}
#40% reduction in contacts
for(i in 1:nreps){
m <- dist1_func(am_list[[1]],"matrix",0.4) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out4 <- res1
out5 <- res2
out6 <- res3
} else
{
out4 <- bind_rows(out4,res1)
out5 <- bind_rows(out5,res2)
out6 <- bind_rows(out6,res3)
}
}
#60% reduction in contacts
for(i in 1:nreps){
m <- dist1_func(am_list[[1]],"matrix",0.6) #see aux_functions.R for this script
net1 <- format_network(m)
res1 <- scenario_sim2(net = net1, n.sim = 1, scenario = "nothing")
res2 <- scenario_sim2(net = net1, n.sim = 1, scenario = "primary_quarantine")
res3 <- scenario_sim2(net = net1, n.sim = 1, scenario = "secondary_quarantine")
res1$sim <- i
res2$sim <- i
res3$sim <- i
if(i == 1)
{
out7 <- res1
out8 <- res2
out9 <- res3
} else
{
out7 <- bind_rows(out7,res1)
out8 <- bind_rows(out8,res2)
out9 <- bind_rows(out9,res3)
}
}
out10 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "nothing")
out11 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "primary_quarantine")
out12 <- scenario_sim2(net = haslemere, n.sim = nreps, scenario = "secondary_quarantine")
res <- bind_rows(out1,out2,out3,out4,out5,out6,out7,out8,out9,out10,out11,out12) %>%
mutate(distancing = rep(c("30% reduction","60% reduction","90% reduction","0% reduction"),
each = nrow(out1)*3),
intervention = rep(rep(c("Nothing", "Primary tracing","Secondary tracing"),
each = nrow(out1)),4))
saveRDS(res,"data-raw/distancing2.rds")
dis2 <- read_rds("data-raw/distancing2.rds")
dis2_fig <- dis2  %>%
case_plot(facet = "grid", gridvar = "distancing")
pdf("inst/plots/Figure_S10.pdf",
width =12,
height = 8)
dis2_fig
dev.off()
dis <- read_rds("data-raw/distancing.rds")
library(tidyverse)
library(cowplot)
library(covidhm)
dis <- read_rds("data-raw/distancing.rds")
tes <- read_rds("data-raw/testing.rds")
tes_fig <- tes %>%
bind_rows(sce %>%
filter(intervention %in% c("Primary tracing",
"Secondary tracing")) %>%
mutate(testing = "No testing")) %>%
mutate(testing = factor(testing, levels = c("No testing",
"5 tests per day",
"25 tests per day",
"50 tests per day"))) %>%
case_plot(facet = "grid",gridvar = "testing",testing = TRUE)+
theme(legend.position = "top")
dis_fig <- dis  %>%
mutate(intervention = recode(intervention, Nothing = "No control")) %>%
case_plot(facet = "grid", gridvar = "distancing")+
theme(legend.position = "none")
fig3 <- plot_grid(tes_fig,dis_fig,nrow = 2,labels = "AUTO",rel_heights = c(0.45,0.55))
pdf("inst/plots/Figure_3.pdf",
width = 12,
height = 16)
fig3
dev.off()
dis <- read_rds("data-raw/distancing.rds")
#distancing
dis %>% filter(week == 9) %>%
group_by(intervention,distancing) %>%
summarise(medcases = median(cumcases)/468,
Ucases = quantile(cumcases,0.75)/468,
Lcases = quantile(cumcases, 0.25)/468)
dis %>% filter(week == 3) %>%
group_by(intervention,distancing) %>%
summarise(medcases = median(weekly_quarantine)/468,
Ucases = quantile(weekly_quarantine,0.75)/468,
Lcases = quantile(weekly_quarantine, 0.25)/468)
